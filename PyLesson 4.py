# # Задание-1:
'''Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.'''

from sys import argv

script_name, first_param, second_param, third_param = argv

f_name, worker_hours, per_hour, bonus = argv

salary = (int(worker_hours) * int(per_hour)) + int(bonus)
print(f'Ваша зарплата {salary} у.е.')


# # Задание-2:
'''
Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123]
'''
my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = []
for i in range(len(my_list)):
    if my_list[i] == my_list[0]:
        continue
    if my_list[i] > my_list[i-1]:
        new_list.append(my_list[i])

print(new_list)





# # Задание-3:
'''Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.'''

foo = [el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]
print(foo)


# # Задание-4:
# '''Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.'''


my_list = [1, 2, 2, 3, 4, 4, 4, 5]
distinct_list = [i for i in my_list if my_list.count(i) < 2]
print(distinct_list)



# # Задание-5:
# '''Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

my_list = [el for el in range(100, 1001) if el % 2 == 0]
new_l = my_list


def my_func(prev_el, el):
    return prev_el + el


print('Sum all numbers ', reduce(my_func, my_list))



# Задание-6:
'''Реализовать два небольших скрипта:
а) бесконечный итератор, генерирующий целые числа, начиная с указанного,
б) бесконечный итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools.'''
from itertools import count, cycle


# a)
def g_infinity(start, stop_number):
    for el in count(start):
        if el > stop_number:
            break
        else:
            print(el)


# b)
def g_same_values(value, stop_number):
    counter = 0
    for el in cycle(value):
        if counter > stop_number:
            break
        else:
            print(el)
            counter += 1

# Задание-7:
'''Реализовать генератор с помощью функции с ключевым словом yield,
создающим очередное значение. При вызове функции должен создаваться объект-генератор. 
Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает 
за получение факториала числа, а в цикле необходимо выводить только первые n чисел,
начиная с 1! и до n!. 
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24
'''


def fact(n):
    fib = 1
    for i in range(1, n + 1):
        fib *= i
    yield fib

for n in range(5):
    for el in fact(n):
        print(f"Факториал {n}! =", el)
        n += 1
